#include <dphi_cloth_triangle_dX.h>
#include <iostream>
//compute 3x3 deformation gradient 

//Input:
//  V - the nx3 matrix of undeformed vertex positions. Each row is a single undeformed vertex position.
//  element - the 1x3 vertex indices for this tetrahedron
//  X - the 3D position in the underformed space at which to compute the gradient
//Output:
//  dphi - the 3x3 gradient of the the basis functions wrt to X. The i'th row stores d phi_i/dX

void dphi_cloth_triangle_dX(Eigen::Matrix3d &dphi, Eigen::Ref<const Eigen::MatrixXd> V, Eigen::Ref<const Eigen::RowVectorXi> element, Eigen::Ref<const Eigen::Vector3d> X) {

    int v1 = element(0), v2 = element(1), v3 = element(2);
    double X_11 = V(v1, 0), X_12 = V(v1, 1), X_13 = V(v1, 2),
	       X_21 = V(v2, 0), X_22 = V(v2, 1), X_23 = V(v2, 2),
	       X_31 = V(v3, 0), X_32 = V(v3, 1), X_33 = V(v3, 2);
    
    dphi.setZero();
    
    Eigen::Matrix2d D1; //D1 = (D.T * D)^(-1)
    D1.setZero();
    D1(0, 0) = (X_11*X_31*-2.0-X_12*X_32*2.0-X_13*X_33*2.0+X_11*X_11+X_12*X_12+X_13*X_13+X_31*X_31+X_32*X_32+X_33*X_33)/((X_11*X_11)*(X_22*X_22)+(X_12*X_12)*(X_21*X_21)+(X_11*X_11)*(X_23*X_23)+(X_13*X_13)*(X_21*X_21)+(X_12*X_12)*(X_23*X_23)+(X_13*X_13)*(X_22*X_22)+(X_11*X_11)*(X_32*X_32)+(X_12*X_12)*(X_31*X_31)+(X_11*X_11)*(X_33*X_33)+(X_13*X_13)*(X_31*X_31)+(X_12*X_12)*(X_33*X_33)+(X_13*X_13)*(X_32*X_32)+(X_21*X_21)*(X_32*X_32)+(X_22*X_22)*(X_31*X_31)+(X_21*X_21)*(X_33*X_33)+(X_23*X_23)*(X_31*X_31)+(X_22*X_22)*(X_33*X_33)+(X_23*X_23)*(X_32*X_32)-X_11*X_21*(X_32*X_32)*2.0-X_11*(X_22*X_22)*X_31*2.0-(X_12*X_12)*X_21*X_31*2.0-X_11*X_21*(X_33*X_33)*2.0-X_11*(X_23*X_23)*X_31*2.0-X_12*X_22*(X_31*X_31)*2.0-X_12*(X_21*X_21)*X_32*2.0-(X_11*X_11)*X_22*X_32*2.0-(X_13*X_13)*X_21*X_31*2.0-X_12*X_22*(X_33*X_33)*2.0-X_12*(X_23*X_23)*X_32*2.0-X_13*X_23*(X_31*X_31)*2.0-X_13*(X_21*X_21)*X_33*2.0-(X_11*X_11)*X_23*X_33*2.0-(X_13*X_13)*X_22*X_32*2.0-X_13*X_23*(X_32*X_32)*2.0-X_13*(X_22*X_22)*X_33*2.0-(X_12*X_12)*X_23*X_33*2.0-X_11*X_12*X_21*X_22*2.0-X_11*X_13*X_21*X_23*2.0-X_12*X_13*X_22*X_23*2.0+X_11*X_12*X_21*X_32*2.0+X_11*X_12*X_22*X_31*2.0+X_11*X_13*X_21*X_33*2.0+X_11*X_13*X_23*X_31*2.0+X_12*X_13*X_22*X_33*2.0+X_12*X_13*X_23*X_32*2.0-X_11*X_12*X_31*X_32*2.0+X_11*X_21*X_22*X_32*2.0+X_12*X_21*X_22*X_31*2.0-X_11*X_13*X_31*X_33*2.0+X_11*X_21*X_23*X_33*2.0+X_13*X_21*X_23*X_31*2.0-X_12*X_13*X_32*X_33*2.0+X_12*X_22*X_23*X_33*2.0+X_13*X_22*X_23*X_32*2.0+X_11*X_22*X_31*X_32*2.0+X_12*X_21*X_31*X_32*2.0+X_11*X_23*X_31*X_33*2.0+X_13*X_21*X_31*X_33*2.0+X_12*X_23*X_32*X_33*2.0+X_13*X_22*X_32*X_33*2.0-X_21*X_22*X_31*X_32*2.0-X_21*X_23*X_31*X_33*2.0-X_22*X_23*X_32*X_33*2.0);
    D1(0, 1) = (X_11*X_21+X_12*X_22+X_13*X_23+X_11*X_31+X_12*X_32+X_13*X_33-X_21*X_31-X_22*X_32-X_23*X_33-X_11*X_11-X_12*X_12-X_13*X_13)/((X_11*X_11)*(X_22*X_22)+(X_12*X_12)*(X_21*X_21)+(X_11*X_11)*(X_23*X_23)+(X_13*X_13)*(X_21*X_21)+(X_12*X_12)*(X_23*X_23)+(X_13*X_13)*(X_22*X_22)+(X_11*X_11)*(X_32*X_32)+(X_12*X_12)*(X_31*X_31)+(X_11*X_11)*(X_33*X_33)+(X_13*X_13)*(X_31*X_31)+(X_12*X_12)*(X_33*X_33)+(X_13*X_13)*(X_32*X_32)+(X_21*X_21)*(X_32*X_32)+(X_22*X_22)*(X_31*X_31)+(X_21*X_21)*(X_33*X_33)+(X_23*X_23)*(X_31*X_31)+(X_22*X_22)*(X_33*X_33)+(X_23*X_23)*(X_32*X_32)-X_11*X_21*(X_32*X_32)*2.0-X_11*(X_22*X_22)*X_31*2.0-(X_12*X_12)*X_21*X_31*2.0-X_11*X_21*(X_33*X_33)*2.0-X_11*(X_23*X_23)*X_31*2.0-X_12*X_22*(X_31*X_31)*2.0-X_12*(X_21*X_21)*X_32*2.0-(X_11*X_11)*X_22*X_32*2.0-(X_13*X_13)*X_21*X_31*2.0-X_12*X_22*(X_33*X_33)*2.0-X_12*(X_23*X_23)*X_32*2.0-X_13*X_23*(X_31*X_31)*2.0-X_13*(X_21*X_21)*X_33*2.0-(X_11*X_11)*X_23*X_33*2.0-(X_13*X_13)*X_22*X_32*2.0-X_13*X_23*(X_32*X_32)*2.0-X_13*(X_22*X_22)*X_33*2.0-(X_12*X_12)*X_23*X_33*2.0-X_11*X_12*X_21*X_22*2.0-X_11*X_13*X_21*X_23*2.0-X_12*X_13*X_22*X_23*2.0+X_11*X_12*X_21*X_32*2.0+X_11*X_12*X_22*X_31*2.0+X_11*X_13*X_21*X_33*2.0+X_11*X_13*X_23*X_31*2.0+X_12*X_13*X_22*X_33*2.0+X_12*X_13*X_23*X_32*2.0-X_11*X_12*X_31*X_32*2.0+X_11*X_21*X_22*X_32*2.0+X_12*X_21*X_22*X_31*2.0-X_11*X_13*X_31*X_33*2.0+X_11*X_21*X_23*X_33*2.0+X_13*X_21*X_23*X_31*2.0-X_12*X_13*X_32*X_33*2.0+X_12*X_22*X_23*X_33*2.0+X_13*X_22*X_23*X_32*2.0+X_11*X_22*X_31*X_32*2.0+X_12*X_21*X_31*X_32*2.0+X_11*X_23*X_31*X_33*2.0+X_13*X_21*X_31*X_33*2.0+X_12*X_23*X_32*X_33*2.0+X_13*X_22*X_32*X_33*2.0-X_21*X_22*X_31*X_32*2.0-X_21*X_23*X_31*X_33*2.0-X_22*X_23*X_32*X_33*2.0);
    D1(1, 0) = (X_11*X_21+X_12*X_22+X_13*X_23+X_11*X_31+X_12*X_32+X_13*X_33-X_21*X_31-X_22*X_32-X_23*X_33-X_11*X_11-X_12*X_12-X_13*X_13)/((X_11*X_11)*(X_22*X_22)+(X_12*X_12)*(X_21*X_21)+(X_11*X_11)*(X_23*X_23)+(X_13*X_13)*(X_21*X_21)+(X_12*X_12)*(X_23*X_23)+(X_13*X_13)*(X_22*X_22)+(X_11*X_11)*(X_32*X_32)+(X_12*X_12)*(X_31*X_31)+(X_11*X_11)*(X_33*X_33)+(X_13*X_13)*(X_31*X_31)+(X_12*X_12)*(X_33*X_33)+(X_13*X_13)*(X_32*X_32)+(X_21*X_21)*(X_32*X_32)+(X_22*X_22)*(X_31*X_31)+(X_21*X_21)*(X_33*X_33)+(X_23*X_23)*(X_31*X_31)+(X_22*X_22)*(X_33*X_33)+(X_23*X_23)*(X_32*X_32)-X_11*X_21*(X_32*X_32)*2.0-X_11*(X_22*X_22)*X_31*2.0-(X_12*X_12)*X_21*X_31*2.0-X_11*X_21*(X_33*X_33)*2.0-X_11*(X_23*X_23)*X_31*2.0-X_12*X_22*(X_31*X_31)*2.0-X_12*(X_21*X_21)*X_32*2.0-(X_11*X_11)*X_22*X_32*2.0-(X_13*X_13)*X_21*X_31*2.0-X_12*X_22*(X_33*X_33)*2.0-X_12*(X_23*X_23)*X_32*2.0-X_13*X_23*(X_31*X_31)*2.0-X_13*(X_21*X_21)*X_33*2.0-(X_11*X_11)*X_23*X_33*2.0-(X_13*X_13)*X_22*X_32*2.0-X_13*X_23*(X_32*X_32)*2.0-X_13*(X_22*X_22)*X_33*2.0-(X_12*X_12)*X_23*X_33*2.0-X_11*X_12*X_21*X_22*2.0-X_11*X_13*X_21*X_23*2.0-X_12*X_13*X_22*X_23*2.0+X_11*X_12*X_21*X_32*2.0+X_11*X_12*X_22*X_31*2.0+X_11*X_13*X_21*X_33*2.0+X_11*X_13*X_23*X_31*2.0+X_12*X_13*X_22*X_33*2.0+X_12*X_13*X_23*X_32*2.0-X_11*X_12*X_31*X_32*2.0+X_11*X_21*X_22*X_32*2.0+X_12*X_21*X_22*X_31*2.0-X_11*X_13*X_31*X_33*2.0+X_11*X_21*X_23*X_33*2.0+X_13*X_21*X_23*X_31*2.0-X_12*X_13*X_32*X_33*2.0+X_12*X_22*X_23*X_33*2.0+X_13*X_22*X_23*X_32*2.0+X_11*X_22*X_31*X_32*2.0+X_12*X_21*X_31*X_32*2.0+X_11*X_23*X_31*X_33*2.0+X_13*X_21*X_31*X_33*2.0+X_12*X_23*X_32*X_33*2.0+X_13*X_22*X_32*X_33*2.0-X_21*X_22*X_31*X_32*2.0-X_21*X_23*X_31*X_33*2.0-X_22*X_23*X_32*X_33*2.0);
    D1(1, 1) = (X_11*X_21*-2.0-X_12*X_22*2.0-X_13*X_23*2.0+X_11*X_11+X_12*X_12+X_13*X_13+X_21*X_21+X_22*X_22+X_23*X_23)/((X_11*X_11)*(X_22*X_22)+(X_12*X_12)*(X_21*X_21)+(X_11*X_11)*(X_23*X_23)+(X_13*X_13)*(X_21*X_21)+(X_12*X_12)*(X_23*X_23)+(X_13*X_13)*(X_22*X_22)+(X_11*X_11)*(X_32*X_32)+(X_12*X_12)*(X_31*X_31)+(X_11*X_11)*(X_33*X_33)+(X_13*X_13)*(X_31*X_31)+(X_12*X_12)*(X_33*X_33)+(X_13*X_13)*(X_32*X_32)+(X_21*X_21)*(X_32*X_32)+(X_22*X_22)*(X_31*X_31)+(X_21*X_21)*(X_33*X_33)+(X_23*X_23)*(X_31*X_31)+(X_22*X_22)*(X_33*X_33)+(X_23*X_23)*(X_32*X_32)-X_11*X_21*(X_32*X_32)*2.0-X_11*(X_22*X_22)*X_31*2.0-(X_12*X_12)*X_21*X_31*2.0-X_11*X_21*(X_33*X_33)*2.0-X_11*(X_23*X_23)*X_31*2.0-X_12*X_22*(X_31*X_31)*2.0-X_12*(X_21*X_21)*X_32*2.0-(X_11*X_11)*X_22*X_32*2.0-(X_13*X_13)*X_21*X_31*2.0-X_12*X_22*(X_33*X_33)*2.0-X_12*(X_23*X_23)*X_32*2.0-X_13*X_23*(X_31*X_31)*2.0-X_13*(X_21*X_21)*X_33*2.0-(X_11*X_11)*X_23*X_33*2.0-(X_13*X_13)*X_22*X_32*2.0-X_13*X_23*(X_32*X_32)*2.0-X_13*(X_22*X_22)*X_33*2.0-(X_12*X_12)*X_23*X_33*2.0-X_11*X_12*X_21*X_22*2.0-X_11*X_13*X_21*X_23*2.0-X_12*X_13*X_22*X_23*2.0+X_11*X_12*X_21*X_32*2.0+X_11*X_12*X_22*X_31*2.0+X_11*X_13*X_21*X_33*2.0+X_11*X_13*X_23*X_31*2.0+X_12*X_13*X_22*X_33*2.0+X_12*X_13*X_23*X_32*2.0-X_11*X_12*X_31*X_32*2.0+X_11*X_21*X_22*X_32*2.0+X_12*X_21*X_22*X_31*2.0-X_11*X_13*X_31*X_33*2.0+X_11*X_21*X_23*X_33*2.0+X_13*X_21*X_23*X_31*2.0-X_12*X_13*X_32*X_33*2.0+X_12*X_22*X_23*X_33*2.0+X_13*X_22*X_23*X_32*2.0+X_11*X_22*X_31*X_32*2.0+X_12*X_21*X_31*X_32*2.0+X_11*X_23*X_31*X_33*2.0+X_13*X_21*X_31*X_33*2.0+X_12*X_23*X_32*X_33*2.0+X_13*X_22*X_32*X_33*2.0-X_21*X_22*X_31*X_32*2.0-X_21*X_23*X_31*X_33*2.0-X_22*X_23*X_32*X_33*2.0);

    Eigen::MatrixXd T; //T = D1 * D.T = (D.T * D)^(-1) * D.T
    T.resize(2,3);
    T.setZero();
    T(0, 0) = -D1(0, 0)*(X_11-X_21)-D1(0, 1)*(X_11-X_31);
    T(0, 1) = -D1(0, 0)*(X_12-X_22)-D1(0, 1)*(X_12-X_32);
    T(0, 2) = -D1(0, 0)*(X_13-X_23)-D1(0, 1)*(X_13-X_33);
    T(1, 0) = -D1(1, 0)*(X_11-X_21)-D1(1, 1)*(X_11-X_31);
    T(1, 1) = -D1(1, 0)*(X_12-X_22)-D1(1, 1)*(X_12-X_32);
    T(1, 2) = -D1(1, 0)*(X_13-X_23)-D1(1, 1)*(X_13-X_33);
    

    dphi(0, 0) = - T(0, 0) - T(1, 0);
    dphi(0, 1) = - T(0, 1) - T(1, 1);
    dphi(0, 2) = - T(0, 2) - T(1, 2);
    dphi(1, 0) = T(0, 0);
    dphi(1, 1) = T(0, 1);
    dphi(1, 2) = T(0, 2);
    dphi(2, 0) = T(1, 0);
    dphi(2, 1) = T(1, 1);
    dphi(2, 2) = T(1, 2);

}
